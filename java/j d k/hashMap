# HashMap

## 容量大小是2的次方,下面方法根据指定容量算出大于等于指定容量的最小2的次方数
	`
	/**
     * Returns a power of two size for the given target capacity.
     */
    static final int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }
   	`
   	### | 或操作，全为零，结果为零；其他结果为1
   	### 又移动一位或操作，第一个为1的后一位变为一，以此类推，最多31位为1，就是把最多31为的二进制全部变为1111111111，然后在+1，就变成了2的次方
   	### cap-1的原因是刚好是2的次方时，最后结果就是2的

## hash桶index计算
	### 计算key自己的HashCode h
		#### String的HashCode的计算方式s[0]*31^(n-1) + s[1]*31^(n-2) + ... + S[n-1]
	### hash = h^(h>>>16),hashCode的高16位和低16位进行异或，大部分的HashMap的容量都是远小于2^16,然后hashCode的高位也参与计算，减少hash冲突
	### index = (n-1)&hash,对table的长度进行取模,和2^n-1进行&操作，就是对2^n进行取模操作





## linkedHashMap

  ### 继承HashMap，维护了一个链表，来保持顺序
  ### accessOrder false按照插入顺序进行排序
  ### accessOrder true按照先按照插入顺序排序，每次查询和插入，如果查询和插入的元素以及存在，会移动到tail，

